<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CHENSheng的笔记</title>
    <link href="/2023/06/08/CHENSheng%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/08/CHENSheng%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="/2023/06/08/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/08/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot Web开发**"></a>SpringBoot Web开发**</h2><p><img src="/2023/06/08/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C:%5CUsers%5CHP%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230604201845114.png" alt="image-20230604201845114"></p><p>我们知道，SpringBoot没有webapp目录，不像SpringMVC，同时也没有jsp，所以需要通过模板引擎Thymeleaf代替</p><p>思考：</p><ul><li>没有webapp的话那么如何放置静态页面，或者放置静态资源文件呢？这时候就需要在自动装配的配置类去找了【思维的过程】</li></ul><h2 id="7-SpringBoot-静态资源导入"><a href="#7-SpringBoot-静态资源导入" class="headerlink" title="7.SpringBoot-静态资源导入"></a><strong>7.SpringBoot-静态资源导入</strong></h2><p>思考：没有了webapp，springboot是如何将页面进行放置的，放置的目录在哪儿？</p><p>webapp是SpringMVC的内容，而Springboot是一切基于配置的，也就是有自动装配的原理，所以我们可以猜想有那么一个自动装配类叫做WebMvcAutoConfiguation</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604210706404.png" alt="image-20230604210706404"></p><p>查看方法和结构，猜想和MVC有关的</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604210745391.png" alt="image-20230604210745391"></p><p>隐藏方法的具体实现，我们只需要查看类上的注解</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604210843671.png" alt="image-20230604210843671"></p><p>可以发现<code>WebProperties</code>标注在内部类中</p><p>大胆猜，用结果去验证，而不是人云亦云</p><p>通过方法名大胆猜</p><ul><li>配置路径匹配</li></ul><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604211216564.png" alt="image-20230604211216564"></p><p>看起来好像是，读代码</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604211349025.png" alt="image-20230604211349025"></p><p>这个方法才是</p><p>通过<code>/webjar/**</code>路径映射到<code>classpath:xxx</code></p><p>所以我们可以猜资源就是放置在<code>classpath:xxx</code></p><p>搜索webjars</p><p>下载jquery</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604212334682.png" alt="image-20230604212334682"></p><p>使用maven的方式下载，得到的就是封装了目录的js文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars.npm<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604212616519.png" alt="image-20230604212616519"></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604212712759.png" alt="image-20230604212712759"></p><p>观察目录结构</p><p>根据上面的webmvcconfig类，我们尝试着访问&#x2F;webjars&#x2F;**，带上jquery.js的地址看是否能否访问到META-INF&#x2F;resources&#x2F;webjars下的资源</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604213203481.png" alt="image-20230604213203481"></p><p>可以发现确实映射上了</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214428287.png" alt="image-20230604214428287"></p><p>webjar的路径已经验证过了</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214615246.png" alt="image-20230604214615246"></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214628727.png" alt="image-20230604214628727"></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214640398.png" alt="image-20230604214640398"></p><p>路径是&#x2F;**</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214657600.png" alt="image-20230604214657600"></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214734748.png" alt="image-20230604214734748"></p><p>映射的位置是数组，resources为classpath：</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214757942.png" alt="image-20230604214757942"></p><p>在resources根目录下新建四个映射的目录</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604214928580.png" alt="image-20230604214928580"></p><p>分别编写js文件，编写不同的内容，去测试</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604215044404.png" alt="image-20230604215044404"></p><p>访问1.js</p><p><img src="/2023/06/08/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Users\HP\AppData\Roaming\Typora\typora-user-images\image-20230604215204860.png" alt="image-20230604215204860"></p><p>可以发现META-INF目录下的优先级最高</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604215328776.png" alt="image-20230604215328776"></p><p>删除该目录下的文件，测试优先级</p><p><img src="/2023/06/08/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Users\HP\AppData\Roaming\Typora\typora-user-images\image-20230604215438175.png" alt="image-20230604215438175"></p><p>发现resources目录第二</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604215504833.png" alt="image-20230604215504833"></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604215526820.png" alt="image-20230604215526820"></p><p>static目录第三</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604215550151.png" alt="image-20230604215550151"></p><p>public目录下的最低</p><p>小结：</p><ul><li>路径映射资源目录有两种方法：<ul><li>&#96;&#96;&#x2F;webjars&#x2F;**<code> 映射</code>META-INF&#x2F;resources&#x2F;webjars&#x2F;&#96;目录</li><li><code>/**</code>映射四个地址：classpath:&#x2F;META-INF&#x2F;resources&#x2F;，classpath:&#x2F;resources&#x2F;，classpath:&#x2F;resources&#x2F;，classpath:&#x2F;public&#x2F;</li></ul></li><li>第二种方式映射目录的优先级<ul><li>classpath:&#x2F;META-INF&#x2F;resources&#x2F; &gt; classpath:&#x2F;resources&#x2F; &gt; classpath:&#x2F;resources&#x2F;&gt;classpath:&#x2F;public&#x2F;</li></ul></li></ul><p>再看方法</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604220045581.png" alt="image-20230604220045581"></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604221426409.png" alt="image-20230604221426409"></p><p>从上面的方法可以推断出我们需要找到staticPath</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604221400816.png" alt="image-20230604221400816"></p><p>如果配置了staticPath，那么默认的映射地址就会失效，默认的映射地址是<code>/**</code>会被自定义的映射地址代替<code>/abc/**</code></p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604222221682.png" alt="image-20230604222221682"></p><p>测试</p><p>默认地址失效</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604222344543.png" alt="image-20230604222344543"></p><p>手动配置的地址生效</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604222317262.png" alt="image-20230604222317262"></p><p>访问资源需要通过&#x2F;hello&#x2F;作为地址访问，会自动映射到四个目录地址</p><p><img src="https://markdown-1304894526.cos.ap-shanghai.myqcloud.com/image-20230604230559636.png" alt="image-20230604230559636"></p><h3 id="1-1关于-EnableConfiguation注解"><a href="#1-1关于-EnableConfiguation注解" class="headerlink" title="1. 1关于@EnableConfiguation注解"></a><strong>1. 1关于@EnableConfiguation注解</strong></h3><p>详解：<a href="https://www.jianshu.com/p/7f54da1cb2eb">https://www.jianshu.com/p/7f54da1cb2eb</a></p><p>小结：</p><ul><li>@EnableConfiguationProperties：将类与spring的application.properties进行绑定，并会 作为spring的容器进行注入</li><li>ConfiguationProperties：将类与spring的application.properties进行绑定，但是不会交给spring容器管理，需要加上@Component</li></ul><h3 id="1-2-关于-Configuration注解"><a href="#1-2-关于-Configuration注解" class="headerlink" title="1.2 关于@Configuration注解"></a>1.2 关于@Configuration注解</h3><p>详解：<a href="https://blog.csdn.net/loongkingwhat/article/details/105752446">https://blog.csdn.net/loongkingwhat/article/details/105752446</a></p><p>小结：</p><ul><li>@Configuration相当与xml配置文件中的<code>beans</code></li><li>@Bean相当于xml配置文件中的<code>bean</code></li></ul><h3 id="1-3-关于-Component、-Bean、-Configuration的区别"><a href="#1-3-关于-Component、-Bean、-Configuration的区别" class="headerlink" title="1.3 关于@Component、@Bean、@Configuration的区别"></a>1.3 关于@Component、@Bean、@Configuration的区别</h3><p>详解：<a href="https://blog.csdn.net/yangshengwei230612/article/details/109309571?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168594469216800180615734%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168594469216800180615734&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-109309571-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=@Configuration%E3%80%81@Bean%E3%80%81@Component%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">https://blog.csdn.net/yangshengwei230612/article/details/109309571?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168594469216800180615734%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168594469216800180615734&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-109309571-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=%40Configuration%E3%80%81%40Bean%E3%80%81%40Component%E7%9A%84%E5%8C%BA%E5%88%AB&amp;spm=1018.2226.3001.4187</a></p><p>小结：</p><ul><li>@Configuration相当与xml配置文件中的<code>beans</code></li><li>@Component也相当于配置类，相当与xml配置文件中的<code>beans</code></li><li>@Bean相当于xml配置文件中的<code>bean</code></li></ul><p>区别：</p><ul><li>@Component内使用@Bean相当于重新new对象，不会从单例池里面获取对象</li><li>@Configuration内使用@Bean相当于使用同一个对象，会从单例池里面获取对象</li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/08/hello-world/"/>
    <url>/2023/06/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
